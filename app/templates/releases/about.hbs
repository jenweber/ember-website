<section class="section">

  <h2>Ember's Release Strategy</h2>

  <p>
    Ember is built by people who are at the front lines of building and upgrading their company's apps.
    They want the latest features without the burn of breaking changes, and so Ember follows
    a different release strategy than most other JavaScript tools.
  </p>
</section>

<section>
  <h3>Our goals</h3>
  <ul>
    <li>
      Add new features in a way that doesn't break existing apps, through
      backwards compatibility and optional feature flags
    </li>
    <li>
      Maintain LTS (long term support) versions for 54 weeks, so that teams who upgrade their apps
      infrequently can keep getting security updates and bugfixes
    </li>
    <li>
      Make a minor release about every six weeks, so teams that use Ember can plan their work
    </li>
    <li>
      Follow a public RFC (request for comments) process so that all users and companies
      can participate in proposing and evaluating new features
    </li>
    <li>
      Provide automated tooling for upgrades and syntax changes
    </li>
    <li>
      Only cut a new major version (i.e. make a breaking change) when we really, really have to
    </li>
    <li>
      Give developers a way to test drive the latest and greatest features, on their own terms.
    </li>
  </ul>
</section>

<section>
  <h3>How Ember uses SemVer</h3>
  <p>
    SemVer stands for
    <a href="http://semver.org/">Semantic Versioning</a>,
    a powerful standard across the JavaScript community that helps developers understand
    which versions of a library will work in their app as-is, and which versions
    would require changes if they wanted to upgrade.
  </p>

  <p>
    You might notice that although Ember has been around for a long time, it's version number is low.
    That is because Ember aims to ship new features in minor releases, and make
    major releases as rare as possible.
    When you see a library or framework that has <i>many</i> major versions, each one of those numbers
    represents a "breaking change."
    Breaking changes force development teams to spend time researching
    the changes and modifing their codebase before they can upgrade.
    The bigger the codebase, or the more complex the app, the more time and effort it takes.
    Ember is committed to providing a better experience than that.
  </p>

  <h3>What SemVer means for your app</h3>
  <p>
    What this means in practice is, if an Ember app is version 3.4, it should keep working
    as-is at version 3.8.
    Although that version has new features, everything is backwards-compatible.
    What this means is, teams can do development and refactors at their own pace,
    all while receiving security updates and the option to use new features.
  </p>
  <p>
    According to SemVer,
    releases are named according to a MAJOR.MINOR.PATCH scheme.
    Only MAJOR versions releases may change or remove public APIs after deprecation.
    MINOR versions may introduce new features so long as they are backwards compatible,
    and PATCH releases may include bug or security fixes.
  </p>
</section>